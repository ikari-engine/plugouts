#!/usr/bin/env python

import os
import argparse


class NotAFileError(OSError):
    pass


def main() -> None:

    # Parse command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--source', type=str, required=True)
    parser.add_argument('-d', '--destination', type=str, required=True)
    parser.add_argument('-t', '--title', type=str, required=False)
    parser.add_argument('-o', '--nav-order', type=int, required=True)
    parser.add_argument('-p', '--permissive', type=bool,
                        required=False, default=False)
    args = parser.parse_args()

    # Compute source and destination paths
    source: str = args.source
    destination: str = args.destination
    nav_order: int = args.nav_order
    title: str | None = args.title
    permissive: bool = args.permissive
    source = os.path.abspath(source)
    destination = os.path.abspath(destination)
    destination_dir = os.path.dirname(destination)

    # Validate paths
    if not os.path.isfile(source):
        if permissive:
            return
        raise FileNotFoundError(f'File not found: {source}')
    if os.path.exists(destination_dir) and not os.path.isdir(destination_dir):
        raise NotADirectoryError(f'Not a directory: {destination_dir}')
    os.makedirs(destination_dir, exist_ok=True)
    if os.path.exists(destination) and not os.path.isfile(destination):
        raise NotAFileError(f'File exists: {destination}')

    # Compute title
    if title is None:
        title = os.path.basename(source)
        title, *_ = os.path.splitext(title)

    # Read source file
    with open(source, 'r') as fin:
        content = fin.read()

        # Compute destination content
        destination_content = '---\n'
        destination_content += 'layout: page\n'
        destination_content += f'title: {title}\n'
        destination_content += f'nav_order: {nav_order}\n'
        destination_content += '---\n'
        destination_content += f'# {title}\n'
        destination_content += '\n'
        destination_content += content

        # Write destination file
        with open(destination, 'w') as fout:
            fout.write(destination_content)


if __name__ == '__main__':
    main()
